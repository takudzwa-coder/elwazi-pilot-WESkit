## Flask configuration values
## (see https://flask.palletsprojects.com/en/1.1.x/config/#builtin-configuration-values)

# Enable this during running of tests
DEBUG: true

# development | production
ENV: &environment development

# Enable this during running of tests.
TESTING: true

# Use a custom workdir for each run. This needs to be defined by tags field in request
require_workdir_tag: false

# 'executor' defines where the workflow engine is executed. Allowed values are
# "ssh", "ssh_lsf", "ssh_slurm", "local", "local_lsf", and "local_slurm"
#
# Remote executors (all but "local") need a remote_data_dir. This is the corresponding value for
# WESKIT_DATA, but located on the remote filesystem. "remote_data_dir" is ignored if the executor
# type is set to "local". If any of the executors involving SSH is used, additionally "login" is
# is needed, but is ignored for all "local" executor types.
executor:
  type: "local"
#  remote_data_dir: "/tmp"
#  remote_workflows_dir: "/tmp"
#  login:
#    username: "user"
#    hostname: "localhost"
#    port: 22
#    knownhosts_file: "~/.ssh/known_hosts"
#    keyfile: "~/.ssh/weskit_cluster_test_rsa"
#    keyfile_passphrase: ""

static_service_info:

    # Unique ID of this service. Reverse domain name notation is recommended, though not required.
    # The identifier should attempt to be globally unique so it can be used in downstream
    # aggregator services e.g. Service Registry.
    id: "weskit.api"

    # Name of this service. Should be human readable.
    name: "WESkit"

    # Type of GA4GH service
    type:
      # Namespace in reverse domain name format. Use org.ga4gh for implementations compliant with
      # official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or
      # implementations diverging from official GA4GH specifications, use a different namespace
      # (e.g. your organization's reverse domain name).
      group: "weskit.api"
      # Name of the API or GA4GH specification implemented. Official GA4GH types should be
      # assigned as part of standards approval process. Custom artifacts are supported.
      artifact: "registry.gitlab.com/one-touch-pipeline/weskit/api"
      # Version of the API or specification. GA4GH specifications use semantic versioning.
      version: 1.0.0

    # Description of the service. Should be human readable and provide information about the
    # service.
    description: "WESkit - A GA4GH Compliant Workflow Execution Server"

    organization:
      # Name of the organization responsible for the service.
      name: "My Org"
      # URL of the website of the organization (RFC 3986 format).
      url: "https://my.org"

    # URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986
    # format), or an email (RFC 2368 format).
    contact_url:
      mailto:your@email.de

    # URL of the documentation of this service (RFC 3986 format). This should help someone learn
    # how to use your service, including any specifics required to access data, e.g.
    # authentication.
    documentation_url:
      https://gitlab.com/one-touch-pipeline/weskit/documentation/

    # Timestamp describing when the service was first deployed and available (RFC 3339 format).
    # Example: 2019-06-04T12:58:19Z
    created_at: 2021-06-04T12:58:19Z

    # Timestamp describing when the service was last updated (RFC 3339 format).
    # TODO Set this during deployment?
    updated_at: 2021-06-04T12:58:19Z

    # Environment the service is running in. Use this to distinguish between production,
    # development and testing/staging deployments. Suggested values are prod, test, dev, staging.
    # However this is advised and not enforced.
    environment: *environment

    # Version of the service being described. Semantic versioning is recommended, but other
    # identifiers, such as dates or commit hashes, are also allowed. The version should be changed
    # whenever the service is updated.
    version: 0.0.0

    supported_filesystem_protocols:
        - s3
        - file

    # The identifiers used in workflow_engine_versions correspond to versions
    # of the workflows available in WESkit. Currently, there are Snakemake
    # and Nextflow Workflow-instances that identify as "SMK" and "NFL",
    # respectively. Only these identifiers (Workflow.name) can be used here.
    # These are also the versions-strings that WESkit accepts via its REST-API.
    workflow_engine_versions:
        SMK: "6.10.0"

    # The first two levels of keys are the workflow_type and the workflow_type_version.
    # May need revision. See https://gitlab.com/one-touch-pipeline/weskit/api/-/issues/91.
    default_workflow_engine_parameters:
      SMK:
        "6.10.0":
           - name: cores
             value: "1"

    # The workflow_type_versions need to be among the workflow_engine_versions.
    # TODO: Compare https://gitlab.com/one-touch-pipeline/weskit/-/issues/91
    workflow_type_versions:
      SMK:
        workflow_type_version:
          - "5"

    # A web page URL with human-readable instructions on how to get an authorization token for use
    # with a specific WES endpoint.
    auth_instructions_url: "https://somewhere.org"

    tags:
        tag1: value1
        tag2: value2

cors:
  enabled: false

login:
  enabled: false
