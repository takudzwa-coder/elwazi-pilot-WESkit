# SPDX-FileCopyrightText: 2023 The WESkit Contributors
#
# SPDX-License-Identifier: MIT

## Flask configuration values
## (see https://flask.palletsprojects.com/en/1.1.x/config/#builtin-configuration-values)

# Enable this during running of tests
DEBUG: true

# development | production
ENV: &environment development

# Enable this during running of tests.
TESTING: true

# Use a custom workdir for each run. This needs to be defined by tags field in request
require_workdir_tag: false

# 'executor' defines where the workflow engine is executed. Allowed values are
# "ssh", "ssh_lsf", "ssh_slurm", "local", "local_lsf", and "local_slurm"
#
# Remote executors (all but "local") need a remote_data_dir. This is the corresponding value for
# WESKIT_DATA, but located on the remote filesystem. "remote_data_dir" is ignored if the executor
# type is set to "local". If any of the executors involving SSH is used, additionally "login" is
# is needed, but is ignored for all "local" executor types.
executor:
  type: "local"
#  remote_data_dir: "/tmp"
#  remote_workflows_dir: "/tmp"
#  singularity_containers_dir: "/tmp"
#  login:
#    username: "user"
#    hostname: "localhost"
#    port: 22
#    knownhosts_file: "~/.ssh/known_hosts"
#    keyfile: "~/.ssh/weskit_cluster_test_rsa"
#    keyfile_passphrase: ""
#    keepalive_interval: str = "30s",
#    keepalive_count_max: int = 5,
#    retry_options:  # Optional
#       wait_exponential:
#         multiplier: 1
#         min: 4
#         max: 300
#       wait_random:
#         min: 0
#         max: 1
#       stop_after_attempt: 5


static_service_info:

# Commented out fields irrelevant for the ServiceInfo according to the Swagger file 1.0.0.
#
#    # Unique ID of this service. Reverse domain name notation is recommended, though not required.
#    # The identifier should attempt to be globally unique, so it can be used in downstream
#    # aggregator services e.g. Service Registry.
#    id: "weskit.api"
#
#    # Name of this service. Should be human-readable.
#    name: "WESkit"
#
#    # Type of GA4GH service
#    type:
#      # Namespace in reverse domain name format. Use org.ga4gh for implementations compliant with
#      # official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or
#      # implementations diverging from official GA4GH specifications, use a different namespace
#      # (e.g. your organization's reverse domain name).
#      group: "weskit.api"
#      # Name of the API or GA4GH specification implemented. Official GA4GH types should be
#      # assigned as part of standards approval process. Custom artifacts are supported.
#      artifact: "registry.gitlab.com/one-touch-pipeline/weskit/api"
#      # Version of the API or specification. GA4GH specifications use semantic versioning.
#      version: 1.0.0
#
#    # Description of the service. Should be human-readable and provide information about the
#    # service.
#    description: "WESkit - A GA4GH Compliant Workflow Execution Server"
#
#    organization:
#      # Name of the organization responsible for the service.
#      name: "My Org"
#      # URL of the website of the organization (RFC 3986 format).
#      url: "https://my.org"
#
#    # URL of the documentation of this service (RFC 3986 format). This should help someone to learn
#    # how to use your service, including any specifics required to access data, e.g.
#    # authentication.
#    documentation_url:
#      https://gitlab.com/one-touch-pipeline/weskit/documentation/
#
#  # Timestamp describing when the service was first deployed and available (RFC 3339 format).
#  # Example: 2019-06-04T12:58:19Z
#  created_at: 2021-06-04T12:58:19Z
#
#  # Timestamp describing when the service was last updated (RFC 3339 format).
#  # TODO Set this during deployment?
#  updated_at: 2021-06-04T12:58:19Z
#
#  # Version of the service being described. Semantic versioning is recommended, but other
#  # identifiers, such as dates or commit hashes, are also allowed. The version should be changed
#  # whenever the service is updated.
#  version: 0.0.0
#
#  # Environment the service is running in. Use this to distinguish between production,
#  # development and testing/staging deployments. Suggested values are prod, test, dev, staging.
#  # However this is advised and not enforced.
#  environment: *environment

    # URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986
    # format), or an email (RFC 2368 format).
    contact_url:
      mailto:your@email.de

    supported_filesystem_protocols:
      - file
      - S3

    # A web page URL with human-readable instructions on how to get an authorization token for use
    # with a specific WES endpoint.
    auth_instructions_url: "https://somewhere.org"

    tags:
        tag1: value1
        tag2: value2


workflow_engines:

  # Note the "type" fields for the default parameters are optional and free text string. To express
  # the accepted value range for the parameter for the client, however, the existing examples use
  # the following syntax:
  #
  # * Use Python type annotation syntax.
  # * The default, if the "type" field is omitted here, is "str", which means unparsed.
  # * Strings to be accepted by specific processing are suggested to be written as
  #   `str validFor Python.fully.qualified.processing_function($)`
  #   where the `$` denotes the parameter that will be used to process the parameter. The `$`
  #   can be omitted if the parse function takes the string as first or only parameter.
  # * A regular expression matching exactly the allowed values.
  #
  # Valid parameter values:
  # * `Optional[str]`: null (JSON, YAML) or any string
  # * `Optional[str valid for Python.pathlib.Path]`: null or a string that is understood by Path
  #
  # The code that does the processing can be found in the `WorkflowEngine` subclasses. It is not
  # interpreted in any way.
  #
  NFL:
    "23.04.1-singularity": 
      container:
         type: "singularity"
      default_parameters: &default_nfl_engine_parameters
        - name: "engine-environment"
          value: null
          api: false
          type: "Optional[str]"
        - name: "max-memory"
          value: "256m"
          # api: false       # By default `false`
          type: "Optional[str validFor Python.memory_units.Memory.from_str]"
        - name: "max-runtime"
          value: "05:00"
          api: false
          type: "Optional[str validFor Python.tempora.parse_timedelta]"
        - name: "accounting-name"
          api: true
          type: "Optional[str]"
        - name: "job-name"
          api: true
          type: "Optional[str]"
        - name: "group"
          api: true
          type: "Optional[str]"
        - name: "queue"
          api: true
          type: "Optional[str]"
        - name: "tempdir"
          value: "/tmp"
          api: false
          type: "str validFor Python.pathlib.Path"
        - name: "trace"
          value: "true"
          api: true
          type: "bool"
        - name: "timeline"
          value: "true"
          api: true
          type: "bool"
        - name: "graph"
          value: "true"
          api: true
          type: "bool"
        - name: "report"   # Not supported by 23.04.1
          value: "true"
          api: true
          type: "bool"
        - name: "resume"
          value: "false"
          type: "bool"
          api: false
        - name: "nxf-work"
          value: "./"
          api: false
          type: "str validFor Python.pathlib.Path"
        - name: "with-tower"
          value: "false"
          api: false
          type: "bool"          
        - name: "tower-access-token"
          api: false
          type: "Optional[str]"
        - name: "nxf-assets"
          api: false
          type: "Optional[str]" 
        - name: "workflow-revision"
          api: false
          value: null
          type: str
    "23.04.1":
      default_parameters: *default_nfl_engine_parameters

  SMK:
    "7.30.2-singularity":
      container:
         type: singularity
      default_parameters: &default_smk_engine_parameters
        - name: "engine-environment"
          value: null
          api: true
          type: "Optional[str]"
        - name: "cores"
          value: "1"
          api: false
          type: "Optional[int]"
        - name: "max-memory"
          value: "100m"
          api: true
          type: "Optional[str validFor Python.memory_units.Memory.from_str($)]"
        - name: "max-runtime"
          value: "05:00"
          api: true
          type: "Optional[str validFor Python.tempora.parse_timedelta($)]"
        - name: "accounting-name"
          api: true
          type: "Optional[str]"
        - name: "job-name"
          api: true
          type: "Optional[str]"
        - name: "group"
          api: true
          type: "Optional[str]"
        - name: "queue"
          api: true
          type: "Optional[str]"
        - name: "use-conda"
          api: false
          type: "bool"
          value: "false"
        - name: "use-singularity"
          api: false
          type: "bool"
          value: "false"
        - name: "profile"
          api: false
          type: "Optional[str]"
        - name: "tes"
          api: false
          type: "Optional[Url]"
        - name: "data-aws-access-key-id"
          api: false
          type: "Optional[str]"
        - name: "data-aws-secret-access-key"
          api: false
          type: "Optional[str]"
        - name: "task-conda-pkgs-dir"
          api: false
          type: "Optional[Path]"
        - name: "task-conda-envs-path"
          api: false
          type: "Optional[Path]"
          value: "conda_envs/"
        - name: "task-home"
          api: false
          type: "Optional[Path]"
        - name: "resume"
          value: "true"
          type: "bool"
          api: false
        - name: "jobs"
          api: false
          type: "Optional[int]"
        - name: "wms-monitor"
          api: false
          type: "str"
        - name: "wms-monitor-arg"
          api: false
          type: "str"
    "7.30.2":
      default_parameters: *default_smk_engine_parameters



cors:
  enabled: false

login:
  enabled: true
  jwt:
    # https://flask-jwt-extended.readthedocs.io/en/stable/options.html#JWT_COOKIE_SECURE
    # Should be true in production.
    JWT_COOKIE_SECURE: true
    # https://flask-jwt-extended.readthedocs.io/en/stable/options/#JWT_TOKEN_LOCATION
    JWT_TOKEN_LOCATION: ["headers"]
    # https://flask-jwt-extended.readthedocs.io/en/stable/options/#JWT_HEADER_NAME
    JWT_HEADER_NAME: "Authorization"
    # https://flask-jwt-extended.readthedocs.io/en/stable/options/#JWT_HEADER_TYPE
    JWT_HEADER_TYPE: "Bearer"
    JWT_ALGORITHM: "RS256"
    JWT_DECODE_AUDIENCE: "account"
    JWT_IDENTITY_CLAIM: "sub"
    JWT_ACCESS_COOKIE_PATH: "/"
    JWT_REFRESH_COOKIE_PATH: "/"
    userinfo_validation_claim: "name"
    userinfo_validation_value: "Harry Potter"

# Celery configuration. Use keys and values according to
# https://docs.celeryproject.org/en/stable/userguide/configuration.html#configuration
#
# Note: CELERY_RESULT_BACKEND/RESULT_BACKEND, and BROKER_URL have *lower* priority.
#
# Note: The default configuration is in api/weskit/celeryconfig.py.
celery: {}
